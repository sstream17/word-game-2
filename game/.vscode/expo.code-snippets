{
  // Place your game workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create a stylesheet": {
    "scope": "typescriptreact",
    "prefix": "exstyles",
    "body": [
      "const styles = StyleSheet.create({",
      "  ${1:container}: {",
      "    $2",
      "  },",
      "});",
    ],
    "description": "Create a new stylesheet for Expo components",
  },
  "Create a new component": {
    "scope": "typescriptreact",
    "prefix": "excomponent",
    "body": [
      "import { View } from \"react-native\";",
      "",
      "interface IProps {",
      "  $2",
      "}",
      "",
      "export function ${1:$TM_FILENAME_BASE}(props: IProps) {",
      "  const {$3} = props;",
      "  $4",
      "",
      "  return <View></View>;",
      "}",
    ],
    "description": "Create a new Expo component",
  },
  "Add a new React state variable": {
    "scope": "typescriptreact",
    "prefix": "ruseState",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2);",
    ],
    "description": "Add a useState hook",
  },
  "Add a new React memoized callback": {
    "scope": "typescriptreact",
    "prefix": "ruseCallback",
    "body": [
      "const $1 = useCallback(($2) => {$3}, []);",
    ],
    "description": "Add a useCallback hook",
  },
}
